--[[
FFFFFFFFF    UU      UU    NN      NN    CCCCCCCC    TTTTTTTTTT    IIIIIIIII    OOOOOOOOO    NNN      NN    SSSSSSSS
FF          UU      UU    NNN     NN   CC                TT          II      OO        OO   NNNN     NN  SS        
FFFFFFFFF   UU      UU    NN  NN  NN   CC                TT          II      OO        OO   NN NN    NN   SSSSSSS 
FF           UU    UU     NN    NNNN   CC                TT          II      OO        OO   NN  NN   NN         SS
FF             UUUU       NN      NN    CCCCCCCC        TT        IIIIIIIII    OOOOOOOOO    NN    NNNN    SSSSSSSS

]]--

function msg(a)
    print(a)
end

-- ESP
local nesp = false
local desp = false
local hesp = false
local function name(parent, text, plr, turn)
    if turn then
nesp = turn
        if not parent:FindFirstChild("BillName") then
            local e = Instance.new("BillboardGui", parent)
            local i = Instance.new("TextLabel", e)

            e.AlwaysOnTop = true
            e.ResetOnSpawn = false
            e.Name = "BillName"
            e.LightInfluence = 0
            e.Size = UDim2.new(0, 10, 0, 10)

            i.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            i.Text = text
            i.Size = UDim2.new(0.0001, 0.00001, 0.0001, 0.00001)
            i.BorderSizePixel = 4
            i.LineHeight = 2
            i.Name = plr.Name
            i.BorderColor3 = Color3.new(255, 10, 30)
            i.BorderSizePixel = 0
            i.Font = "SourceSans"
            i.TextSize = 15
            i.TextStrokeTransparency = 0

            local function updateColor()
                local teamColor = plr.TeamColor.Color
                i.TextColor3 = teamColor
            end

            updateColor() -- Actualizar el color del texto al crearlo

            plr:GetPropertyChangedSignal("TeamColor"):Connect(updateColor)
        end
    end
end

local function health(parent, text, hum, turn)
    if turn then
hesp = turn
        if not parent:FindFirstChild("BillHP") then
            local e = Instance.new("BillboardGui", parent)
            local i = Instance.new("TextLabel", e)

            e.AlwaysOnTop = true
            e.ResetOnSpawn = false
            e.Name = "BillHP"
            e.LightInfluence = 0
            e.Size = UDim2.new(0, 10, 0, 10)

            i.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            i.Size = UDim2.new(0.0001, 0.00001, 0.0001, 0.00001)
            i.BorderSizePixel = 4
            i.Name = "Health"
            i.LineHeight = 0
            i.BorderColor3 = Color3.new(255, 10, 30)
            i.BorderSizePixel = 0
            i.Font = "SourceSans"
            i.TextXAlignment = "Right"
            i.TextSize = 15
            i.TextStrokeTransparency = 0
            i.TextColor3 = Color3.fromRGB(0, 255, 0)

            local function updateHealth()
                i.Text = "|HP|: " .. math.floor(hum.Health)
            end

            updateHealth() -- Actualizar el texto al crearlo

            hum:GetPropertyChangedSignal("Health"):Connect(updateHealth)
        end
    end
end

local function distance(parent, text, head, turn)
    if turn then
desp = turn
        if not parent:FindFirstChild("BillDistance") then
            local e = Instance.new("BillboardGui", parent)
            local i = Instance.new("TextLabel", e)

            e.AlwaysOnTop = true
            e.ResetOnSpawn = false
            e.Name = "BillDistance"
            e.LightInfluence = 0
            e.Size = UDim2.new(0, 10, 0, 10)

            i.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            i.Size = UDim2.new(0.0001, 0.00001, 0.0001, 0.00001)
            i.BorderSizePixel = 4
            i.Name = "Studs"
            i.LineHeight = 0
            i.BorderColor3 = Color3.new(255, 10, 30)
            i.BorderSizePixel = 0
            i.Font = "SourceSans"
            i.TextXAlignment = "Left"
            i.TextSize = 15
            i.TextStrokeTransparency = 0
            i.TextColor3 = Color3.fromRGB(255, 255, 255)

            local function updateDistance()
                local distanceValue = (game.Players.LocalPlayer.Character.Head.Position - head.Position).magnitude
                i.Text = "   |" .. math.floor(distanceValue) .. "|"
            end

            game:GetService("RunService").Heartbeat:Connect(function()
                updateDistance()
            end)
        end
    end
end

game.Players.PlayerAdded:Connect(function(plr)
    plr.CharacterAdded:Connect(function(char)
        if char then
            local humanoid = char:WaitForChild("Humanoid")
            if humanoid then
                local head = char:WaitForChild("Head")
                if head then
                    if nesp then
                        name(char:WaitForChild("Head"), char.Name, plr, nesp)
                    end
                    if hesp then
                        health(char:WaitForChild("Head"), math.floor(humanoid.Health), humanoid, hesp)
                    end
                    if desp then
                        local distanceValue = (game.Players.LocalPlayer.Character.Head.Position - char.Head.Position).magnitude
                        distance(char:WaitForChild("Head"), distanceValue, head, desp)
                    end
                end
            end
        end
    end)
end)

game.Players.PlayerRemoving:Connect(function(plr)
    for i, l in pairs(workspace:GetDescendants()) do
        if l.Name == plr.Name .. "  " then
            l.Parent:Destroy()
        end
    end
end)

game:GetService("RunService").Heartbeat:Connect(function()

    for i, h in pairs(game.Players:GetPlayers()) do
        if h ~= game.Players.LocalPlayer then
            local char = h.Character
            if char then
                local humanoid = char:WaitForChild("Humanoid")
                if humanoid then
                    local head = char:WaitForChild("Head")
                    if head then
                        local b = head:FindFirstChild("BillName")
                        if nesp and not b then
                            name(char:WaitForChild("Head"), char.Name, h, nesp)
                        elseif not Name:Get() and b then
                            b:Destroy()
                        end

                        local h = head:FindFirstChild("BillHP")
                        if hesp and not h then
                            health(char:WaitForChild("Head"), math.floor(humanoid.Health), humanoid, hesp)
                        elseif not hesp and h then
                            h:Destroy()
                        end

                        local d = head:FindFirstChild("BillDistance")
                        if desp and not d then
                            local distanceValue = (game.Players.LocalPlayer.Character.Head.Position - char.Head.Position).magnitude
                            distance(char:WaitForChild("Head"), distanceValue, head, desp)
                        elseif not desp and d then
                            d:Destroy()
                        end
                    end
                end
            end
        end
    end
end)

---------------------------CLOSE ESP
